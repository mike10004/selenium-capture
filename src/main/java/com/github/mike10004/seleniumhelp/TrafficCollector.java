package com.github.mike10004.seleniumhelp;

import com.google.common.net.HostAndPort;
import net.lightbody.bmp.BrowserMobProxy;
import net.lightbody.bmp.mitm.CertificateAndKeySource;
import org.littleshoot.proxy.ChainedProxyManager;
import org.littleshoot.proxy.ChainedProxyType;
import org.littleshoot.proxy.HttpFiltersSource;
import org.openqa.selenium.WebDriverException;

import javax.annotation.Nullable;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.function.Supplier;

import static java.util.Objects.requireNonNull;

public interface TrafficCollector {

    /**
     * Collects traffic generated by the given generator into a HAR. This invokes
     * {@link #collect(TrafficGenerator, TrafficMonitor)} with a null monitor reference.
     * @param generator the generator
     * @param <R> type of result the generator returns
     * @return the HAR containing all traffic generated
     * @throws IOException if something I/O related goes awry
     * @throws WebDriverException if the web driver could not be created or the generator throws one
     */
    <R> HarPlus<R> collect(TrafficGenerator<R> generator) throws IOException, WebDriverException;

    /**
     * Collects traffic generated by the given generator into a HAR. Notifications of request/response
     * interactions can be sent to the given monitor, optionally.
     * @param generator the generator
     * @param <R> type of result the generator returns
     * @param monitor a monitor, or null
     * @return the HAR containing all traffic generated
     * @throws IOException on I/O error
     * @throws WebDriverException if the web driver could not be created or the generator throws one
     */
    <R> HarPlus<R> collect(TrafficGenerator<R> generator, @Nullable TrafficMonitor monitor) throws IOException, WebDriverException;
    /**
     * Monitors traffic generated by the given generator. This like
     * {@link #collect(TrafficGenerator, TrafficMonitor)} but without capturing a HAR.
     * @param generator the traffic generator
     * @param monitor the monitor
     * @param <R> generator result type
     * @return the generator result
     * @throws IOException on I/O error
     * @throws WebDriverException on webdriver error
     */
    <R> R monitor(TrafficGenerator<R> generator, TrafficMonitor monitor) throws IOException, WebDriverException;

    /**
     * Causes traffic to be generated by the given generator and returns the result.
     * This is essentially {@link #monitor(TrafficGenerator, TrafficMonitor)} without
     * notifying a monitor of request/response interactions.
     * @param generator the traffic generator
     * @param <R> generator result type
     * @return the generator result
     * @throws IOException on I/O error
     * @throws WebDriverException on webdriver error
     */
    <R> R drive(TrafficGenerator<R> generator) throws IOException, WebDriverException;

    /**
     * Returns a new builder instance.
     * @param webDriverFactory the webdriver factory
     * @return a builder
     */
    static TrafficCollectorImpl.Builder builder(WebDriverFactory webDriverFactory) {
        return new TrafficCollectorImpl.Builder(webDriverFactory);
    }

    @SuppressWarnings("unused")
    final class Builder {

        private final WebDriverFactory webDriverFactory;
        private CertificateAndKeySource certificateAndKeySource = null;
        private final List<HttpFiltersSource> httpFiltersSources = new ArrayList<>();
        private ProxyUris.BmpConfigurator upstreamConfigurator = ProxyUris.BmpConfigurator.inoperative();
        private Supplier<? extends BrowserMobProxy> interceptingProxyInstantiator = BrAwareBrowserMobProxyServer::new;
        private final List<HarPostProcessor> harPostProcessors = new ArrayList<>();
        private ExceptionReactor exceptionReactor = ExceptionReactor.PROPAGATE;

        Builder(WebDriverFactory webDriverFactory) {
            this.webDriverFactory = requireNonNull(webDriverFactory);
            httpFiltersSources.add(AnonymizingFiltersSource.getInstance());
        }

        public Builder onException(ExceptionReactor exceptionReactor) {
            this.exceptionReactor = requireNonNull(exceptionReactor);
            return this;
        }

        public Builder collectHttps(CertificateAndKeySource certificateAndKeySource) {
            this.certificateAndKeySource = requireNonNull(certificateAndKeySource);
            return this;
        }

        /**
         * Sets the supplier of the proxy server instance that is used to intercept and collect traffic.
         * By default, we supply a custom implementation that supports brotli decoding,
         * {@link BrAwareBrowserMobProxyServer}. To revert this behavior to a more hands-off implementation,
         * set this to a supplier of a {@link net.lightbody.bmp.BrowserMobProxyServer} instance.
         * @param interceptingProxyInstantiator the instantiator
         * @return this builder instance
         */
        public Builder interceptingProxyInstantiator(Supplier<? extends BrowserMobProxy> interceptingProxyInstantiator) {
            this.interceptingProxyInstantiator = requireNonNull(interceptingProxyInstantiator);
            return this;
        }

        public Builder nonAnonymizing() {
            httpFiltersSources.remove(AnonymizingFiltersSource.getInstance());
            return this;
        }

        public Builder filter(HttpFiltersSource filter) {
            httpFiltersSources.add(filter);
            return this;
        }

        /**
         * Adds all argument filters sources to this builder's filters list.
         * @param val the filters sources to add
         * @return this instance
         */
        public Builder filters(Collection<? extends HttpFiltersSource> val) {
            httpFiltersSources.addAll(val);
            return this;
        }

        private Builder upstreamProxy(ProxyUris.BmpConfigurator configurator) {
            this.upstreamConfigurator = requireNonNull(configurator);
            return this;
        }

        public Builder noUpstreamProxy() {
            return upstreamProxy(ProxyUris.BmpConfigurator.noProxy());
        }

        @Deprecated
        public Builder upstreamProxy(InetSocketAddress address, ChainedProxyType proxyType) {
            if (address == null) {
                return noUpstreamProxy();
            } else {
                return upstreamProxy(() -> literalize(address), proxyType);
            }
        }

        private static HostAndPort literalize(InetSocketAddress socketAddress) {
            if (socketAddress == null) {
                return null;
            }
            return HostAndPort.fromParts(socketAddress.getHostString(), socketAddress.getPort());
        }

        private Builder upstreamProxy(Supplier<HostAndPort> supplier, ChainedProxyType proxyType) {
            requireNonNull(proxyType);
            return upstreamProxyManager(() -> {
                HostAndPort socketAddress = supplier.get();
                if (socketAddress == null) {
                    return null;
                }
                return UpstreamProxy.noCredentials(socketAddress, proxyType);
            });
        }

        private Builder upstreamProxyManager(Supplier<ChainedProxyManager> chainedProxyManagerSupplier) {
            return upstreamProxy(ProxyUris.BmpConfigurator.upstream(chainedProxyManagerSupplier));
        }

        /**
         * Configures the collector to use an upstream proxy specified by a URI. The URI components
         * must be as described in {@link WebdrivingConfig#getProxySpecification()}.
         * @param proxySpecificationSupplier
         * @return this builder instance
         */
        public Builder upstreamProxy(Supplier<URI> proxySpecificationSupplier) {
            return upstreamProxy(ProxyUris.BmpConfigurator.fromUriSupplier(proxySpecificationSupplier));
        }

        public Builder harPostProcessor(HarPostProcessor harPostProcessor) {
            harPostProcessors.add(harPostProcessor);
            return this;
        }

        public TrafficCollector build() {
            return new TrafficCollectorImpl(webDriverFactory,
                    certificateAndKeySource, upstreamConfigurator,
                    httpFiltersSources, interceptingProxyInstantiator,
                    harPostProcessors, exceptionReactor);
        }

    }

}
